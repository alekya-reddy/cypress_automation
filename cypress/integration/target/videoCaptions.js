import { createAuthoringInstance, createConsumptionInstance } from '../../support/pageObject.js'

const authoring = createAuthoringInstance({ org: "automation-target", tld: "lookbookhq" })
const consumption = createConsumptionInstance({ org: 'automation-target', tld: 'lookbookhq' })

const captionsTracks = {
    config1: {
        name: "targetSettingscaptions.js",
        slug: "target-config-captions",
        contents: ["Oracle Cloud captions"],
        captionsLanguage: "French",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config2: {
        name: "targetSettingscaptions2.js",
        slug: "target-config-captions2",
        contents: ["Oracle Cloud captions"],
        captions: "off",
        index: "0",
        verify: false,
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config3: {
        name: "targetSettingscaptions.js",
        cloneName: "targetSettingscaptionsclone.js"
    },
    config4: {
        name: "targetSettingscaptions3.js",
        slug: "target-config-captions3",
        contents: ["Oracle Cloud captions"],
        captionsLanguage: "Polish",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config5: {
        name: "targetSettingscaptions4.js",
        slug: "target-config-captions4",
        contents: ["English-autogenerated"],
        captionsLanguage: "English",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config6: {
        name: "targetSettingscaptions5.js",
        slug: "target-config-captions5",
        contents: ["Video with no subtitles"],
        captionsLanguage: "English",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config7: {
        name: "targetSettingscaptions7.js",
        slug: "target-config-captions7",
        contents: ["Brightcove - Used in Cypress automation to test VEX"],
        captionsLanguage: "Japanese",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config8: {
        name: "targetSettingscaptions8.js",
        slug: "target-config-captions8",
        contents: ["Brightcove - Used in Cypress automation to test VEX"],
        captions: "off",
        index: "0",
        verify: false,
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config9: {
        name: "targetSettingscaptions7.js",
        cloneName: "targetSettingscaptionsclone7.js"
    },
    config10: {
        name: "targetSettingscaptions9.js",
        slug: "target-config-captions9",
        contents: ["Brightcove - Used in Cypress automation to test VEX"],
        captionsLanguage: "Polish",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config11: {
        name: "targetSettingscaptions10.js",
        slug: "target-config-captions10",
        contents: ["Brightcove video with no subtitles"],
        captionsLanguage: "English",
        captions: "on",
        index: "0",
        verify: false,
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config12: {
        name: "targetSettingscaptions8.js",
        cloneName: "targetSettingscaptionsclone8.js"
    },
    config13: {
        name: "targetSettingscaptions13.js",
        slug: "target-config-captions13",
        contents: ["The New Vimeo Player - used in cypress"],
        captionsLanguage: "English",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config14: {
        name: "targetSettingscaptions14.js",
        slug: "target-config-captions14",
        contents: ["The New Vimeo Player - used in cypress"],
        captions: "off",
        index: "0",
        verify: false,
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config15: {
        name: "targetSettingscaptions13.js",
        cloneName: "targetSettingscaptionsclone13.js"
    },
    config16: {
        name: "targetSettingscaptions16.js",
        slug: "target-config-captions16",
        contents: ["The New Vimeo Player - used in cypress"],
        captionsLanguage: "German",
        defaultLanguage:"Deutsch",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    },
    config17: {
        name: "targetSettingscaptions18.js",
        slug: "target-config-captions18",
        contents: ["Vimeo - without captions"],
        captionsLanguage: "English",
        captions: "on",
        index: "0",
        get url() {
            return `${authoring.common.baseUrl}/${this.slug}`
        }
    }
}

const captionsNotSupportMessage="Selected language is not supported. Caption is being displayed in the default language if supported by the player."

describe("Target - Video captions", () => {
    it("Visit the target track which has subtitle enabled and disabled for youtube videos", () => {
        //Captions off from target track and checking in consumption
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config2.name)
        authoring.target.addTrack(captionsTracks.config2)
        authoring.target.configure(captionsTracks.config2)

        cy.visit(captionsTracks.config2.url)
        cy.waitForIframeToLoad(consumption.target.youtube.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.youtube.iframe).within(() => {
            cy.get("div.ytp-chrome-bottom").then(() => {
                cy.get(consumption.target.youtube.videoPlayer).should('exist').trigger('mouseover')
                cy.get(consumption.target.youtube.settings).should('be.visible', { timeout: 10000 }).click({ force: true })
                cy.wait(1000)
                cy.contains("div.ytp-menuitem-label", "Subtitles/CC").parents("div.ytp-menuitem").find(consumption.target.youtube.menuContent).invoke('text').then(text => {
                    if (text.includes("Off")) {
                        cy.contains(consumption.target.youtube.menuContent, "Off").should('be.visible', { timeout: 10000 })
                    }
                    else {
                        cy.contains(consumption.target.youtube.menuContent, "English").should('be.visible', { timeout: 10000 })
                    }
                })
            })
        })


        //Captions on from target track and checking in consumption
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config1.name)
        authoring.target.deleteTrack(captionsTracks.config3.cloneName)
        authoring.target.addTrack(captionsTracks.config1)
        authoring.target.configure(captionsTracks.config1)

        cy.visit(captionsTracks.config1.url)

        cy.waitForIframeToLoad(consumption.target.youtube.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.youtube.iframe).within(() => {
            cy.get("div.ytp-chrome-bottom").then(() => {
                cy.get(consumption.target.youtube.videoPlayer).should('exist').trigger('mouseover')
                cy.get(consumption.target.youtube.settings).should('be.visible', { timeout: 10000 }).click({ force: true })
                cy.contains(consumption.target.youtube.menuContent, captionsTracks.config1.captionsLanguage).should('be.visible', { timeout: 10000 })
                cy.contains(consumption.target.youtube.menuContent, captionsTracks.config1.captionsLanguage).should('be.visible', { timeout: 10000 }).click()
                cy.contains("Hindi").click()
                cy.contains(consumption.target.youtube.menuContent, "Hindi").should('be.visible', { timeout: 10000 })
            })
        })

        //Clone the target track and validate captions are cloned
        authoring.common.login()
        authoring.target.visit()
        authoring.target.configure(captionsTracks.config3)
        cy.contains('strong', captionsTracks.config1.contents[0], { timeout: 20000 }).click()
        cy.get(authoring.target.pagePreview.captions).invoke('css', 'background-color').then(val => {
            expect(val).to.equal('rgb(0, 169, 203)')
        })
        cy.get(authoring.target.pagePreview.pagePreview).within(() => {
            cy.contains('label', 'Language').parent('div').find("span").should("contain", "French")
        })

        cy.contains('a', 'Preview').invoke('attr', 'href').then(link => {
            cy.visit(link)
        })

        cy.waitForIframeToLoad(consumption.target.youtube.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.youtube.iframe).within(() => {
            cy.get("div.ytp-chrome-bottom").then(() => {
                cy.get(consumption.target.youtube.videoPlayer).should('exist').trigger('mouseover')
                cy.get(consumption.target.youtube.settings).should('be.visible', { timeout: 10000 }).click({ force: true })
                cy.contains(consumption.target.youtube.menuContent, captionsTracks.config1.captionsLanguage).should('be.visible', { timeout: 10000 })
            })
        })

        //Validate if the Selected language is not there for captions/Subtitles we show captions in default language in English
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config4.name)
        authoring.target.addTrack(captionsTracks.config4)
        authoring.target.configure(captionsTracks.config4)

        cy.visit(captionsTracks.config4.url)

        cy.waitForIframeToLoad(consumption.target.youtube.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.youtube.iframe).within(() => {
            cy.get("div.ytp-chrome-bottom").then(() => {
                cy.get(consumption.target.youtube.videoPlayer).should('exist').trigger('mouseover')
                cy.get(consumption.target.youtube.settings).should('be.visible', { timeout: 10000 }).click({ force: true })
                cy.contains(consumption.target.youtube.menuContent, "English").should('be.visible', { timeout: 10000 })
            })
        })

        //Validate if the only auto-generated English Subtitles are present video will not show the subtitles.
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config5.name)
        authoring.target.addTrack(captionsTracks.config5)
        authoring.target.configure(captionsTracks.config5)

        cy.visit(captionsTracks.config5.url)
        cy.waitForIframeToLoad(consumption.target.youtube.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.youtube.iframe).within(() => {
            cy.get("div.ytp-chrome-bottom").then(() => {
                cy.get(consumption.target.youtube.videoPlayer).should('exist').trigger('mouseover')
                cy.get(consumption.target.youtube.settings).should('be.visible', { timeout: 10000 }).click({ force: true })
                cy.wait(1000)
                cy.contains("div.ytp-menuitem-label", "Subtitles/CC").parents("div.ytp-menuitem").find(consumption.target.youtube.menuContent).invoke('text').then(text => {
                    if (text.includes("Off")) {
                        cy.contains(consumption.target.youtube.menuContent, "Off").should('be.visible', { timeout: 10000 })
                    }
                })
            })
        })

        //Validate If a Particular Youtube Video is not having any captions we will not show any captions even if Captions are enabled.
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config6.name)
        authoring.target.addTrack(captionsTracks.config6)
        authoring.target.configure(captionsTracks.config6)

        cy.visit(captionsTracks.config6.url)
        cy.waitForIframeToLoad(consumption.target.youtube.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.youtube.iframe).within(() => {
            cy.get("div.ytp-chrome-bottom").then(() => {
                cy.get(consumption.target.youtube.videoPlayer).should('exist').trigger('mouseover')
                cy.get(consumption.target.youtube.settings).should('be.visible', { timeout: 10000 }).click({ force: true })
                cy.wait(1000)
                cy.contains("div.ytp-menuitem-label", "Subtitles/CC").should('not.exist')
            })
        })
    })

    it("Visit the target track which has captions toggle enabled and language selection for Brightcove video", () => {
        //Captions on for target track, selecting language and checking in consumption
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config7.name)
        authoring.target.addTrack(captionsTracks.config7)
        authoring.target.configure(captionsTracks.config7)

        cy.visit(captionsTracks.config7.url)
        cy.get(consumption.vex.brightcove.captionsCC).should('be.visible', { timeout: 10000 }).click({ force: true })
        cy.contains("div[class*='vjs-captions-button'] li[aria-checked='true']", 'Japanese').should('be.visible', { timeout: 10000 })

        //Captions off for target track,and checking in consumption
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config8.name)
        authoring.target.addTrack(captionsTracks.config8)
        authoring.target.configure(captionsTracks.config8)

        cy.visit(captionsTracks.config8.url)
        cy.get(consumption.vex.brightcove.captionsCC).should('be.visible', { timeout: 10000 }).click({ force: true })
        cy.contains("div[class*='vjs-captions-button'] li[aria-checked='true']", 'captions off').should('be.visible', { timeout: 10000 })

        //Clone the target track and validate captions are cloned
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config9.cloneName)
        authoring.target.configure(captionsTracks.config9)
        cy.contains('strong', captionsTracks.config7.contents[0], { timeout: 20000 }).click()
        cy.get(authoring.target.pagePreview.captions).invoke('css', 'background-color').then(val => {
            expect(val).to.equal('rgb(0, 169, 203)')
        })
        cy.get(authoring.target.pagePreview.pagePreview).within(() => {
            cy.contains('label', 'Language').parent('div').find("span").should("contain", "Japanese")
        })

        cy.contains('a', 'Preview').invoke('attr', 'href').then(link => {
            cy.visit(link)
        })
       
        cy.get(consumption.vex.brightcove.captionsCC).should('be.visible', { timeout: 10000 }).click({ force: true })
        cy.contains("div[class*='vjs-captions-button'] li[aria-checked='true']", 'Japanese').should('be.visible', { timeout: 10000 })

        //Clone the target track with captions off and validate details are cloned
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config12.cloneName)
        authoring.target.configure(captionsTracks.config12)
        cy.contains('strong', captionsTracks.config8.contents[0], { timeout: 20000 }).click()
        cy.get(authoring.target.pagePreview.captions).invoke('css', 'background-color').then(val => {
            expect(val).to.equal('rgb(221, 221, 221)')
        })

        cy.contains('a', 'Preview').invoke('attr', 'href').then(link => {
            cy.visit(link)
        })
        cy.get(consumption.vex.brightcove.captionsCC).should('be.visible', { timeout: 10000 }).click({ force: true })
        cy.contains("div[class*='vjs-captions-button'] li[aria-checked='true']", 'captions off').should('be.visible', { timeout: 10000 })

        //Validate if the Selected language is not having captions/Subtitles we show notification message
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config10.name)
        authoring.target.addTrack(captionsTracks.config10)
        authoring.target.configure(captionsTracks.config10)

        cy.visit(captionsTracks.config10.url)
        cy.get(consumption.vex.brightcove.videoPlayer).should('exist')
        cy.wait(1000)
        cy.contains("#video-captions", 'Selected language is not supported. Caption is being displayed in the default language if supported by the player.').should('be.visible', { timeout: 10000 })

        //Validate If a Particular Brightcove Video is not having any captions we will not show any captions even if Captions are enabled and will display an notification.
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config11.name)
        authoring.target.addTrack(captionsTracks.config11)
        authoring.target.configure(captionsTracks.config11)

        cy.visit(captionsTracks.config11.url)
        cy.get(consumption.vex.brightcove.videoPlayer).should('exist')
        cy.wait(1000)
        cy.contains("#video-captions", 'Selected language is not supported. Caption is being displayed in the default language if supported by the player.').should('be.visible', { timeout: 10000 })

    })

    it("Visit the target track which has subtitle enabled and disabled for Vimeo videos", () => {
        //Captions off from target track and checking in consumption
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config14.name)
        authoring.target.addTrack(captionsTracks.config14)
        authoring.target.configure(captionsTracks.config14)

        cy.visit(captionsTracks.config14.url)
        cy.waitForIframeToLoad(consumption.target.vimeo.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.vimeo.iframe).within(() => {
            cy.get(consumption.target.vimeo.videoPlayer).should('exist').trigger('mouseover',{force:true})
            cy.get(consumption.target.vimeo.captions).should('be.visible', { timeout: 10000 }).click({ force: true })
            cy.wait(1000)
            cy.contains("div.vp-menu-option-label","None").parents("li[role='menuitemradio'][aria-checked='true']").should('exist')
        })


        //Captions on from target track and checking in consumption
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config13.name)
        authoring.target.deleteTrack(captionsTracks.config15.cloneName)
        authoring.target.addTrack(captionsTracks.config13)
        authoring.target.configure(captionsTracks.config13)

        cy.visit(captionsTracks.config13.url)

        cy.waitForIframeToLoad(consumption.target.vimeo.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.vimeo.iframe).within(() => {
            cy.get(consumption.target.vimeo.videoPlayer).should('exist').trigger('mouseover',{force:true})
            cy.get(consumption.target.vimeo.captions).should('be.visible', { timeout: 10000 }).click({ force: true })
            cy.wait(1000)
            cy.contains("div.vp-menu-option-label",captionsTracks.config13.captionsLanguage).parents("li[role='menuitemradio'][aria-checked='true']").should('exist')
        })

        //Clone the target track and validate captions are cloned
        authoring.common.login()
        authoring.target.visit()
        authoring.target.configure(captionsTracks.config15)
        cy.contains('strong', captionsTracks.config13.contents[0], { timeout: 20000 }).click()
        cy.get(authoring.target.pagePreview.captions).invoke('css', 'background-color').then(val => {
            expect(val).to.equal('rgb(0, 169, 203)')
        })
        cy.get(authoring.target.pagePreview.pagePreview).within(() => {
            cy.contains('label', 'Language').parent('div').find("span").should("contain", "English")
        })

        cy.contains('a', 'Preview').invoke('attr', 'href').then(link => {
            cy.visit(link)
        })

        cy.waitForIframeToLoad(consumption.target.vimeo.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.vimeo.iframe).within(() => {
            cy.get(consumption.target.vimeo.videoPlayer).should('exist').trigger('mouseover',{force:true})
            cy.get(consumption.target.vimeo.captions).should('be.visible', { timeout: 10000 }).click({ force: true })
            cy.wait(1000)
            cy.contains("div.vp-menu-option-label",captionsTracks.config13.captionsLanguage).parents("li[role='menuitemradio'][aria-checked='true']").should('exist')
        })


        //Validate if the Selected language is not there for captions/Subtitles we show captions in default language of video
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config16.name)
        authoring.target.addTrack(captionsTracks.config16)
        authoring.target.configure(captionsTracks.config16)

        cy.visit(captionsTracks.config16.url)

        cy.waitForIframeToLoad(consumption.target.vimeo.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.vimeo.iframe).within(() => {
            cy.get(consumption.target.vimeo.videoPlayer).should('exist').trigger('mouseover',{force:true})
            cy.get(consumption.target.vimeo.captions).should('be.visible', { timeout: 10000 }).click({ force: true })
            cy.wait(1000)
            cy.contains("div.vp-menu-option-label",captionsTracks.config16.defaultLanguage).parents("li[role='menuitemradio'][aria-checked='true']").should('exist')
        })

        //Validate if the Selected language is not there for captions/Subtitles we show captions in default language along with the message
        authoring.common.login()
        authoring.target.visit()
        authoring.target.deleteTrack(captionsTracks.config17.name)
        authoring.target.addTrack(captionsTracks.config17)
        authoring.target.configure(captionsTracks.config17)

        cy.visit(captionsTracks.config17.url)
        cy.contains(consumption.target.vimeo.message,captionsNotSupportMessage,{timeout:10000}).should('be.visible')
        cy.waitForIframeToLoad(consumption.target.vimeo.iframe, consumption.target.youtube.videoPlayer, 20000)
        cy.getIframeBody(consumption.target.vimeo.iframe).within(() => {
            cy.get(consumption.target.vimeo.videoPlayer).should('exist').trigger('mouseover',{force:true})
            cy.get(consumption.target.vimeo.captions, { timeout: 10000 }).should('not.exist')
        })
    })
})